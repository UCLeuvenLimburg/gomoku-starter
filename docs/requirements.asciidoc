// ROOT
:tip-caption: üí°
:note-caption: ‚ÑπÔ∏è
:important-caption: ‚ö†Ô∏è
:task-caption: üî®
:source-highlighter: pygments
:toc: left
:toclevels: 3
:experimental:
:nofooter:

= Requirements

[IMPORTANT]
====
This is still work in progress.
====

== Minimal Requirements

Failure to meet these requirements will inevitably lead to a failing grade.

=== Minimal Functional Requirements

. <<#crashes,No crashes>>
. At least <<#screens,two screens>>
.. Settings screen
.. Play screen
. Settings Screen
.. Slider + TextBlock that allow to choose board size
.. Min/max values of slides should be determined by model, not hardcoded in V or VM
.. Checkbox that allows to enable capturing
.. Button to start new game and switch to Play Screen
. Play Screen
.. Ability to place stones
.. Invalid moves are prevented
.. Indication of current player
.. Forbidden moves due to capturing are shown
.. Detection of end of game: message with winner/tie is shown
.. Possibility of starting new game after game over
. Decent GUI
.. Game board <<#viewbox,fills>> the window
.. Game board is centered
. At least 3 <<#extensions,extensions>>

=== Implementation Requirements

. The VM *must* be 100% independent of the V and WPF.
  Check your <<#dependencies,project dependencies>>!
. The M must remain independent of all other projects.
. The V must receive all its data through bindings to the VM.
. Do not deal with events (e.g., `Click`) in the code behind but rely on commands in the VM.
. The VM/M must not make *any* View-related decisions.
.. No brushes/colors/... are allowed in the VM.
.. The VM must not contain strings that are shown in the V.
. <<#external-files,No hard coded absolute paths>>
. No external libraries

[#extensions]
== Extension Suggestions

If an extension is implemented wrong, it will not be counted.
We suggest to make some extra extensions as a safety measure.

* In Play Screen, when mouse hovers over square, it lights up
* After winning, highlight winning squares
* Choice between themes (e.g. dark and light theme)
* Undoing moves
* <<#animation,Animation>> (NOT gifs, but WPF animations)
* Timer
* Let players choose colors in settings screen
* User Defined WPF Control for Stones

== Extra Information

[#crashes]
=== No Crashes

The provided model classes throw exceptions when called inappropriately.
For example, you cannot use the `PutStone` method once the game is over.
Therefore, in order to prevent crashes, you will need to make sure the ViewModel only accesses Model members when it is valid to do so.

[#screens]
=== Screens

By screens we mean that there is a *single window* whose entire contents can be switched out.
A demo is available in the https://github.com/UCLeuvenLimburg/wpf-samples[Samples Repo].

[#viewbox]
=== ViewBox

Look up https://docs.microsoft.com/en-us/dotnet/desktop/wpf/controls/viewbox[ViewBox] for an easy way to automatically scale your view.

[#dependencies]
=== Project dependencies

In Visual Studio's Solution Explorer, you get a tree view of all your projects.
Under each project, you can see its dependencies.
It is of utmost importance that you get these right.

* The View project
** Framework dependencies: .NET Core and WPF.
** Project dependencies: Cells, Model, ViewModel
* The ViewModel project
** Framework dependencies: it can depend on .NET Core, but *not* on WPF.
** Project dependencies: only Cells and Model are allowed.
* The Model Project
** Framework Project: .NET Core
** Project dependencies: none

[#external-files]
=== External Files

Your project should run without issues on other machines.
Do not use any hardcoded absolute paths, since these will only work on _your_ machine.

==== Separate Files

If you wish to refer to external files, you should use relative paths.

When using a relative path, e.g. `images/background.jpg`, your application starts looking starting at the location of the executable file, which is normally located somewhere under `bin/debug`.
Do *not* move your external files there.
Instead, place them in the project's root directory and have Visual Studio copy them to `bin/debug`.
This can be done by right clicking on the external file in the Solution Explorer, picking properties, and then setting `Copy to Output Directory` to `Always`.

==== Pack URIs

Alternatively, you can also pack your external files into the executable file.
You will need https://docs.microsoft.com/en-us/dotnet/desktop/wpf/app-development/pack-uris-in-wpf?view=netframeworkdesktop-4.8[pack URIs] to refer to them.

=== Animations

* https://docs.microsoft.com/en-us/dotnet/desktop/wpf/graphics-multimedia/animation-overview[Official documentation]
* A demo is available in the https://github.com/UCLeuvenLimburg/wpf-samples[Samples Repo].